#include<iostream> // needed for input
#include <cstdlib>
#include <ctime> // these two are needed for time and generating random numbers

using namespace std; // namespace means i dont have to keep writing std
int globalCount = 0;
string globalPrint = "";
char globalTeacup;
int globalWeight = 0; // couple global variables here which all track stats basically

/*
i am using three arrays. the first is a vetices array which holds the available nodes.
the second is a multidimensional array which holds the connections to the other nodes where the first line is the connections from A and the
second line is the connection from B and so on. 
the third is a multidimensional weight array which holds the distances between the nodes according to the connections MD array.
*/
char vertices[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };
char connections[][7] = {
    {'B', 'D', 'G', 'H'},
    {'A', 'D', 'H'},
    {'D', 'E', 'G', 'H'},
    {'A', 'B', 'C', 'F', 'G', 'H'},
    {'C', 'F', 'G', 'H'},
    {'D', 'E', 'G', 'H'},
    {'A', 'C', 'D', 'E', 'F', 'H'},
    {'A', 'B', 'C', 'D', 'E', 'F', 'G'}
};

int weights[][7] = {
    {10, 12, 11, 4}, // A -> B, D, G, H
    {10, 8, 20}, // B -> A, D, H
    {17, 8, 13, 10}, // C -> D, E, G, H
    {12, 8, 17, 16, 24, 14}, // D -> A, B, C, F, G, H
    {8, 8, 11, 5}, // E -> C, F, G, H
    {16, 8, 18, 21}, // F -> D, E, G, H
    {11, 13, 24, 11, 18, 30}, // G -> A, C, D, E, F, H
    {4, 20, 10, 14, 5, 21, 30} // H -> A, B, C, D, E, F, G
};


char giveMeARandomChar() { // just generates a random number and then turns it into a char from a - h
    return char((rand() % 8) + 65);
}

void findPath(char start, char end) {
    globalCount++; // this is good to have just so you know how inefficient it has been this time
    char random_char1 = giveMeARandomChar();
    // made a random number function - dont really need this but the random number stuff works so weird in this
    cout << globalWeight << endl;

    cout << start << " "; // print path
    if (globalTeacup != start) { // if the teacup is NOT the same as the previous char then all good
        globalPrint = globalPrint + start;
        globalPrint = globalPrint + " --> "; // 5 char long arrow text
    }

    if (start == end) { // end if path found
        cout << endl;
        globalPrint.pop_back(); // this is because it always adds and arrow and we dont need the last one
        globalPrint.pop_back(); // i tried using the length of the globalString and the length of the global string - 5 ( the length of the arrow text)
        globalPrint.pop_back(); // but it didnt work and this did so 
        globalPrint.pop_back();
        globalPrint.pop_back();
        cout << "Final Results:" << endl; // prints a nice final result area which is the main focus
        cout << "Path: ";
        cout << globalPrint << endl;
        cout << "Weight: ";
        cout << globalWeight << endl;
        exit(0); // kill code once done
    }
    

    for (int i = 0; i < sizeof(vertices); i++) { // look at the verticies array and 
        if (start == vertices[i]) { // find the one which we are searching for
            cout << "vertice " << vertices[i] << " located" << endl; // dont need these really but they are a nice
            cout << "options available are " << connections[i] << endl; // visual cue as to whats happening
            cout << globalCount << endl;
            globalTeacup = start; // this will set the teacup to be the current start so that the next for loop can decide if its the same or not and prevent globalString and globalWeight adding stuff they dont need

            for (int p = 0; p < sizeof(connections[i]); p++) { // in the arrays corresponding to the links between the nodes
                char t = connections[i][p]; // this was for the debugger - so that it creates a variable which can be tracked easily
                if (connections[i][p] == random_char1) { // check if it happens to connect with the random char i have generated lol
                    globalWeight = globalWeight + weights[i][p]; // increase the global weight
                    findPath(connections[i][p], end); // if it matches then call this function ( thats right baby its recursive )
                } // with the new connection as the start variable - end remains the same obvs
            }
            findPath(start, end); // if it hasnt found a valid random number then simply call the function again so as to generate another random number
        }
    }
}

void main() {
    char start, end; // main here requests two chars from the user, start and end nodes
    cout << "Enter the start node: ";
    cin >> start;
    cout << "Enter the end node: ";
    cin >> end;
    start = toupper(start); // makes sure the chars are upper case
    end = toupper(end);
    srand((unsigned)time(0)); // seed the random numbe generator so that it actually generates random numbers its wild that random numbers are so annoying
    globalTeacup = '#'; // initialise the teacup to be a hash - the first time the findpath func is ran it should always find that the teacup is not equal to the previous result
    findPath(start, end); // call the findpath function
}


//psuedocode
/*
store all of the values in some sort of matrix.

findPath(char 1, char 2) {
    if (char 1 == char 2) {
        end
    }
    char r = random char
        if (char r is valid) {
            findPath(char r, char 2)
        }

}


main() {
    char 1 = userinput
        char 2 = userinput
        findPath(char 1, char 2)
}
*/